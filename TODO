Makefile:	TODO compile config.guess config.sub depcomp install-sh \
Makefile-	ltmain.sh missing
Makefile-ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
Makefile-am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
--
Makefile.in:	TODO compile config.guess config.sub depcomp install-sh \
Makefile.in-	ltmain.sh missing
Makefile.in-ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
Makefile.in-am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
--
src/modules/crypto/crypto.c:	/* TODO: There's probably a better way of doing this */
src/modules/crypto/crypto.c-	for (i=0; i<hash_size; i++)
src/modules/crypto/crypto.c-	{
src/modules/crypto/crypto.c-		sprintf(&hash_string[strlen(hash_string)],"%0x",tmp[i]);
--
--
src/dcc.c:/* TODO: Handle duplicates, I think */
src/dcc.c-void dcc_log_filter_handler(struct network *net, struct log_filter *filter, struct log_entry *entry)
src/dcc.c-{
src/dcc.c-  time_t now;
--
src/egg_lib.c:	/* TODO: Test eggdrop behavior to verify it is the same */
src/egg_lib.c-	chan = net->chans; /* wtf on naming */
src/egg_lib.c-	
src/egg_lib.c-	/* go through each channel */
--
src/egg_lib.c:	/* TODO: Find out whether to save, going to go ahead and save for now */
src/egg_lib.c-	users_save(net);
src/egg_lib.c-
src/egg_lib.c-	return 1;
--
src/egg_lib.c:		/* TODO: Check Global list, which doesn't exist yet */
src/egg_lib.c-		return 0;
src/egg_lib.c-	}
src/egg_lib.c-
--
src/egg_lib.c:		/* TODO: Check Global list, which doesn't exist yet */
src/egg_lib.c-		return 0;
src/egg_lib.c-	}
src/egg_lib.c-
--
src/egg_lib.c:		/* TODO: Check Global list, which doesn't exist yet */
src/egg_lib.c-		return 0;
src/egg_lib.c-	}
src/egg_lib.c-
--
src/egg_lib.c:	/* TODO: Error handling */
src/egg_lib.c-	if (chan == NULL)
src/egg_lib.c-		return NULL;	
src/egg_lib.c-
--
src/egg_lib.c:		/* Flush out the socket TODO: Make function for this */
src/egg_lib.c-		shutdown(net->sock, SHUT_RDWR);
src/egg_lib.c-		net->sock = -1;
src/egg_lib.c-		
--
src/egg_lib.c:	/* TODO: Get rid of this shit */
src/egg_lib.c-	otmp = oldcfg->networks;
src/egg_lib.c-	while (otmp->prev != NULL) otmp = otmp->prev;
src/egg_lib.c-
--
src/default_triggers.c:		/* TODO: It should already have the realname here, just need to find the user in a channel */
src/default_triggers.c-		net->users = new_user(data->prefix->nick,  /* username */
src/default_triggers.c-				data->prefix->nick,  /* nickname */
src/default_triggers.c-				NULL,                /* passhash */
--
src/default_triggers.c:		/* TODO: It should already have the realname here, just need to find the user in a channel */
src/default_triggers.c-		user->next       = new_user(data->prefix->nick,  /* username */
src/default_triggers.c-				data->prefix->nick,  /* nickname */
src/default_triggers.c-				NULL,                /* passhash */
--
src/config_engine.c:					/* TODO: Proper checking */
src/config_engine.c-					net->handlen = atoi(search->value);
src/config_engine.c-				}
src/config_engine.c-#ifdef HAVE_JS
--
src/troll_lib.c:	/* TODO: Ensure not needed */
src/troll_lib.c-	if (chan != NULL)
src/troll_lib.c-		while (chan->prev != NULL)
src/troll_lib.c-			chan = chan->prev;
--
src/js_lib.c:		/* TODO: Error handling */
src/js_lib.c-		return JS_FALSE;
src/js_lib.c-	}
src/js_lib.c-
--
src/js_lib.c:		/* TODO: Error handling */
src/js_lib.c-		return JS_FALSE;
src/js_lib.c-	}
src/js_lib.c-
--
src/js_lib.c:		/* TODO: Error handling */
src/js_lib.c-		return JS_FALSE;
src/js_lib.c-	}
src/js_lib.c-
--
src/js_lib.c:		/* TODO: Error handling */
src/js_lib.c-		return JS_FALSE;
src/js_lib.c-	}
src/js_lib.c-
--
src/js_lib.c:		/* TODO: Error Handling */
src/js_lib.c-		return JS_FALSE;
src/js_lib.c-	}
src/js_lib.c-
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
